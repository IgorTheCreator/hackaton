generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String?        @default("Незнакомец")
  level          Int            @default(0)
  progress       Int            @default(0)
  treesSaved     Float          @default(0)
  co2Reduced     Float          @default(0) @map("co2_reduced")
  plasticReduced Float          @default(0)
  email          String         @unique
  password       String
  refreshTokens  RefreshToken[]
  role           Role           @default(USER)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  isBanned       Boolean        @default(false) @map("is_bunned")
  projects       Project[]
  transactions   Transaction[]
  achievments    String[]
  balance        Int            @default(0)

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model RefreshToken {
  token     String   @unique @default(uuid())
  expiresAt DateTime @map("expires_at")
  userAgent String   @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("refresh_tokens")
}

model Project {
  id               String      @id @default(uuid())
  title            String
  description      String
  shortDescription String      @map("short_description")
  purpose          String
  type             ProjectType
  location         String
  tasks            Task[]
  user             User        @relation(fields: [userId], references: [id])
  userId           String      @map("user_id")
  goalFunding      Int         @map("goal_funding")
  currentFunding   Int         @default(0) @map("current_funding")
  endDate          DateTime    @map("end_date")
  startDate        DateTime    @map("start_date")

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  transactions Transaction[]
  esg          Esg?
  socialMedia  SocialMedia[]
}

model SocialMedia {
  id        String   @id @default(uuid())
  name      String
  link      String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("project_id")
}

model Task {
  id          String   @id @default(uuid())
  isCompleted Boolean  @default(false) @map("is_completed")
  title       String
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?  @map("project_id")
}

enum EsgRatingCategory {
  A
  B
  C
  D
}

model Esg {
  // Уникальный идентификатор записи ESG-рейтинга (генерируется автоматически как UUID)
  id String @id @default(uuid())

  ratingDate DateTime

  // Идентификатор проекта, к которому привязан этот ESG-рейтинг (уникален, так как один проект — один рейтинг)
  projectId String @unique @map("project_id")

  // Связь с моделью Project (указывает, к какому проекту относится этот рейтинг)
  project Project @relation(fields: [projectId], references: [id])

  // Итоговый ESG-балл (0–100), отражающий общую оценку проекта по экологическим, социальным и управленческим критериям
  overallScore Float? @map("overall_score")

  // Балл за экологическую категорию (0–50), показывающий вклад экологических метрик в рейтинг
  environmentalScore Float? @map("environmental_score")

  // Балл за социальную категорию (0–30), отражающий влияние проекта на общество
  socialScore Float? @map("social_score")

  // Балл за управленческую категорию (0–20), оценивающий прозрачность и управление проектом
  governanceScore Float? @map("governance_score")

  // Категория рейтинга (A, B, C, D), упрощающая восприятие: A (80–100), B (60–79), C (40–59), D (<40)
  ratingCategory EsgRatingCategory? @map("rating_category")

  // Количество сниженных выбросов CO2 в тоннах (экологический показатель, опционально)
  co2Reduction Float? @map("co2_reduction")

  // Количество посаженных деревьев (экологический показатель, опционально)
  treesPlanted Int? @map("trees_planted")

  // Объём сохранённой или очищенной воды в кубометрах (экологический показатель, опционально)
  waterSaved Float? @map("water_saved")

  // Объём переработанных или предотвращённых отходов в тоннах (экологический показатель, опционально)
  wasteRecycled Float? @map("waste_recycled")

  // Площадь восстановленной земли в гектарах (экологический показатель, опционально)
  landRestored Float? @map("land_restored")

  // Используется ли возобновляемая энергия в проекте (например, солнечные панели), по умолчанию false
  renewableEnergyUsed Boolean @default(false) @map("renewable_energy_used")

  // Минимизируется ли потребление воды в проекте, по умолчанию false
  waterMinimized Boolean @default(false) @map("water_minimized")

  // Качественное описание влияния на биоразнообразие (например, "Поддержка среды для птиц"), опционально
  biodiversityImpact String? @map("biodiversity_impact")

  // Количество созданных рабочих мест (социальный показатель, опционально)
  jobsCreated Int? @map("jobs_created")

  // Количество вовлечённых местных жителей (социальный показатель, опционально)
  communityEngagement Int? @map("community_engagement")

  // Описание улучшения доступа к ресурсам (например, "Чистая вода для 200 семей"), опционально
  resourceAccess String? @map("resource_access")

  // Количество участников образовательных программ по экологии (социальный показатель, опционально)
  educationPrograms Int? @map("education_programs")

  // Готовность публиковать финансовую отчётность (управленческий показатель), по умолчанию false
  financialTransparency Boolean @default(false) @map("financial_transparency")

  // Планируются ли регулярные отчёты о прогрессе проекта (управленческий показатель), по умолчанию false
  regularReports Boolean @default(false) @map("regular_reports")

  // Наличие плана управления экологическими рисками (управленческий показатель), по умолчанию false
  riskManagement Boolean @default(false) @map("risk_management")

  // Вовлечение стейкхолдеров (например, местных властей или НКО) в проект, по умолчанию false
  stakeholderEngagement Boolean @default(false) @map("stakeholder_engagement")

  // Дата и время создания записи ESG-рейтинга, автоматически устанавливается при создании
  createdAt DateTime @default(now()) @map("created_at")

  // Дата и время последнего обновления записи, автоматически обновляется при изменении
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Transaction {
  id        String          @id @default(uuid())
  amount    Int
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @map("user_id")
  project   Project?        @relation(fields: [projectId], references: [id])
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  projectId String?
  type      TransactionType
}

enum TransactionType {
  donation
  refill
}

enum ProjectType {
  TreePlanting
  WaterCleanup
  RenewableEnergy
  WasteRecycling
  Biodiversity
  Other
}
